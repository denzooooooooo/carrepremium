{"ast":null,"code":"import api from './api';\n\n/**\n * Service pour l'intégration Amadeus API\n * Gère toutes les interactions avec les endpoints Amadeus\n */\n\nconst amadeusService = {\n  /**\n   * Rechercher des vols\n   * @param {Object} searchParams - Paramètres de recherche\n   * @returns {Promise}\n   */\n  searchFlights: async searchParams => {\n    try {\n      const response = await api.post('/amadeus/flights/search', {\n        origin: searchParams.origin,\n        destination: searchParams.destination,\n        departureDate: searchParams.departureDate,\n        returnDate: searchParams.returnDate || null,\n        adults: searchParams.adults || 1,\n        children: searchParams.children || 0,\n        infants: searchParams.infants || 0,\n        travelClass: searchParams.travelClass || 'ECONOMY',\n        nonStop: searchParams.nonStop || false,\n        currencyCode: searchParams.currencyCode || 'XOF',\n        max: searchParams.max || 50\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error searching flights:', error);\n      throw error;\n    }\n  },\n  /**\n   * Confirmer le prix d'une offre de vol\n   * @param {Object} flightOffer - Offre de vol\n   * @returns {Promise}\n   */\n  confirmPrice: async flightOffer => {\n    try {\n      const response = await api.post('/amadeus/flights/confirm-price', {\n        flightOffer\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error confirming price:', error);\n      throw error;\n    }\n  },\n  /**\n   * Créer une réservation\n   * @param {Object} bookingData - Données de réservation\n   * @returns {Promise}\n   */\n  createBooking: async bookingData => {\n    try {\n      const response = await api.post('/amadeus/bookings', {\n        flightOffer: bookingData.flightOffer,\n        travelers: bookingData.travelers,\n        contact: bookingData.contact,\n        user_id: bookingData.user_id || null\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error creating booking:', error);\n      throw error;\n    }\n  },\n  /**\n   * Récupérer les détails d'une réservation\n   * @param {number} bookingId - ID de la réservation\n   * @returns {Promise}\n   */\n  getBooking: async bookingId => {\n    try {\n      const response = await api.get(`/amadeus/bookings/${bookingId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error getting booking:', error);\n      throw error;\n    }\n  },\n  /**\n   * Annuler une réservation\n   * @param {number} bookingId - ID de la réservation\n   * @param {string} reason - Raison de l'annulation\n   * @returns {Promise}\n   */\n  cancelBooking: async (bookingId, reason = '') => {\n    try {\n      const response = await api.delete(`/amadeus/bookings/${bookingId}`, {\n        data: {\n          reason\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error cancelling booking:', error);\n      throw error;\n    }\n  },\n  /**\n   * Rechercher des aéroports\n   * @param {string} keyword - Mot-clé de recherche\n   * @returns {Promise}\n   */\n  searchAirports: async keyword => {\n    try {\n      const response = await api.get('/flights/airports/search', {\n        params: {\n          keyword\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error searching airports:', error);\n      throw error;\n    }\n  },\n  /**\n   * Récupérer mes réservations (authentifié)\n   * @returns {Promise}\n   */\n  getMyBookings: async () => {\n    try {\n      const response = await api.get('/amadeus/my-bookings');\n      return response.data;\n    } catch (error) {\n      console.error('Error getting my bookings:', error);\n      throw error;\n    }\n  },\n  /**\n   * Formater les données de vol pour l'affichage\n   * @param {Object} offer - Offre de vol Amadeus\n   * @param {Object} dictionaries - Dictionnaires Amadeus\n   * @returns {Object}\n   */\n  formatFlightOffer: (offer, dictionaries = {}) => {\n    var _firstSegment$departu, _firstSegment$departu2, _firstSegment$departu3, _lastSegment$arrival, _lastSegment$arrival2, _lastSegment$arrival3, _inboundSegments$, _inboundSegments$$dep, _inboundSegments$2, _inboundSegments$2$de, _inboundSegments$3, _inboundSegments$3$de, _inboundSegments, _inboundSegments$arri, _inboundSegments2, _inboundSegments2$arr, _inboundSegments3, _inboundSegments3$arr;\n    const itineraries = offer.itineraries || [];\n    const price = offer.price || {};\n\n    // Extraire les informations du premier segment (aller)\n    const outbound = itineraries[0] || {};\n    const outboundSegments = outbound.segments || [];\n    const firstSegment = outboundSegments[0] || {};\n    const lastSegment = outboundSegments[outboundSegments.length - 1] || {};\n\n    // Extraire les informations du retour si disponible\n    const inbound = itineraries[1] || null;\n    const inboundSegments = inbound ? inbound.segments || [] : [];\n\n    // Récupérer les noms des compagnies aériennes\n    const carrierCodes = offer.validatingAirlineCodes || [];\n    const airlines = carrierCodes.map(code => {\n      var _dictionaries$carrier;\n      return ((_dictionaries$carrier = dictionaries.carriers) === null || _dictionaries$carrier === void 0 ? void 0 : _dictionaries$carrier[code]) || code;\n    });\n    return {\n      id: offer.id,\n      price: {\n        total: parseFloat(price.total || 0),\n        currency: price.currency || 'XOF',\n        base: parseFloat(price.base || 0)\n      },\n      outbound: {\n        departure: {\n          airport: ((_firstSegment$departu = firstSegment.departure) === null || _firstSegment$departu === void 0 ? void 0 : _firstSegment$departu.iataCode) || '',\n          time: ((_firstSegment$departu2 = firstSegment.departure) === null || _firstSegment$departu2 === void 0 ? void 0 : _firstSegment$departu2.at) || '',\n          terminal: ((_firstSegment$departu3 = firstSegment.departure) === null || _firstSegment$departu3 === void 0 ? void 0 : _firstSegment$departu3.terminal) || ''\n        },\n        arrival: {\n          airport: ((_lastSegment$arrival = lastSegment.arrival) === null || _lastSegment$arrival === void 0 ? void 0 : _lastSegment$arrival.iataCode) || '',\n          time: ((_lastSegment$arrival2 = lastSegment.arrival) === null || _lastSegment$arrival2 === void 0 ? void 0 : _lastSegment$arrival2.at) || '',\n          terminal: ((_lastSegment$arrival3 = lastSegment.arrival) === null || _lastSegment$arrival3 === void 0 ? void 0 : _lastSegment$arrival3.terminal) || ''\n        },\n        duration: outbound.duration || '',\n        stops: outboundSegments.length - 1,\n        segments: outboundSegments\n      },\n      inbound: inbound ? {\n        departure: {\n          airport: ((_inboundSegments$ = inboundSegments[0]) === null || _inboundSegments$ === void 0 ? void 0 : (_inboundSegments$$dep = _inboundSegments$.departure) === null || _inboundSegments$$dep === void 0 ? void 0 : _inboundSegments$$dep.iataCode) || '',\n          time: ((_inboundSegments$2 = inboundSegments[0]) === null || _inboundSegments$2 === void 0 ? void 0 : (_inboundSegments$2$de = _inboundSegments$2.departure) === null || _inboundSegments$2$de === void 0 ? void 0 : _inboundSegments$2$de.at) || '',\n          terminal: ((_inboundSegments$3 = inboundSegments[0]) === null || _inboundSegments$3 === void 0 ? void 0 : (_inboundSegments$3$de = _inboundSegments$3.departure) === null || _inboundSegments$3$de === void 0 ? void 0 : _inboundSegments$3$de.terminal) || ''\n        },\n        arrival: {\n          airport: ((_inboundSegments = inboundSegments[inboundSegments.length - 1]) === null || _inboundSegments === void 0 ? void 0 : (_inboundSegments$arri = _inboundSegments.arrival) === null || _inboundSegments$arri === void 0 ? void 0 : _inboundSegments$arri.iataCode) || '',\n          time: ((_inboundSegments2 = inboundSegments[inboundSegments.length - 1]) === null || _inboundSegments2 === void 0 ? void 0 : (_inboundSegments2$arr = _inboundSegments2.arrival) === null || _inboundSegments2$arr === void 0 ? void 0 : _inboundSegments2$arr.at) || '',\n          terminal: ((_inboundSegments3 = inboundSegments[inboundSegments.length - 1]) === null || _inboundSegments3 === void 0 ? void 0 : (_inboundSegments3$arr = _inboundSegments3.arrival) === null || _inboundSegments3$arr === void 0 ? void 0 : _inboundSegments3$arr.terminal) || ''\n        },\n        duration: inbound.duration || '',\n        stops: inboundSegments.length - 1,\n        segments: inboundSegments\n      } : null,\n      airlines: airlines.join(', '),\n      availableSeats: offer.numberOfBookableSeats || 9,\n      rawOffer: offer // Garder l'offre complète pour la réservation\n    };\n  },\n  /**\n   * Formater la durée ISO 8601 en format lisible\n   * @param {string} duration - Durée au format ISO 8601 (ex: PT2H30M)\n   * @returns {string}\n   */\n  formatDuration: duration => {\n    if (!duration) return '';\n    const match = duration.match(/PT(\\d+H)?(\\d+M)?/);\n    if (!match) return duration;\n    const hours = match[1] ? parseInt(match[1]) : 0;\n    const minutes = match[2] ? parseInt(match[2]) : 0;\n    if (hours && minutes) {\n      return `${hours}h ${minutes}min`;\n    } else if (hours) {\n      return `${hours}h`;\n    } else if (minutes) {\n      return `${minutes}min`;\n    }\n    return duration;\n  },\n  /**\n   * Formater la date/heure\n   * @param {string} dateTime - Date/heure ISO\n   * @returns {Object}\n   */\n  formatDateTime: dateTime => {\n    if (!dateTime) return {\n      date: '',\n      time: ''\n    };\n    const dt = new Date(dateTime);\n    return {\n      date: dt.toLocaleDateString('fr-FR', {\n        day: '2-digit',\n        month: 'short',\n        year: 'numeric'\n      }),\n      time: dt.toLocaleTimeString('fr-FR', {\n        hour: '2-digit',\n        minute: '2-digit'\n      }),\n      full: dt\n    };\n  }\n};\nexport default amadeusService;","map":{"version":3,"names":["api","amadeusService","searchFlights","searchParams","response","post","origin","destination","departureDate","returnDate","adults","children","infants","travelClass","nonStop","currencyCode","max","data","error","console","confirmPrice","flightOffer","createBooking","bookingData","travelers","contact","user_id","getBooking","bookingId","get","cancelBooking","reason","delete","searchAirports","keyword","params","getMyBookings","formatFlightOffer","offer","dictionaries","_firstSegment$departu","_firstSegment$departu2","_firstSegment$departu3","_lastSegment$arrival","_lastSegment$arrival2","_lastSegment$arrival3","_inboundSegments$","_inboundSegments$$dep","_inboundSegments$2","_inboundSegments$2$de","_inboundSegments$3","_inboundSegments$3$de","_inboundSegments","_inboundSegments$arri","_inboundSegments2","_inboundSegments2$arr","_inboundSegments3","_inboundSegments3$arr","itineraries","price","outbound","outboundSegments","segments","firstSegment","lastSegment","length","inbound","inboundSegments","carrierCodes","validatingAirlineCodes","airlines","map","code","_dictionaries$carrier","carriers","id","total","parseFloat","currency","base","departure","airport","iataCode","time","at","terminal","arrival","duration","stops","join","availableSeats","numberOfBookableSeats","rawOffer","formatDuration","match","hours","parseInt","minutes","formatDateTime","dateTime","date","dt","Date","toLocaleDateString","day","month","year","toLocaleTimeString","hour","minute","full"],"sources":["/Users/mkpagnon/Desktop/carrepremium/carre-premium-frontend/src/services/amadeusService.js"],"sourcesContent":["import api from './api';\n\n/**\n * Service pour l'intégration Amadeus API\n * Gère toutes les interactions avec les endpoints Amadeus\n */\n\nconst amadeusService = {\n  /**\n   * Rechercher des vols\n   * @param {Object} searchParams - Paramètres de recherche\n   * @returns {Promise}\n   */\n  searchFlights: async (searchParams) => {\n    try {\n      const response = await api.post('/amadeus/flights/search', {\n        origin: searchParams.origin,\n        destination: searchParams.destination,\n        departureDate: searchParams.departureDate,\n        returnDate: searchParams.returnDate || null,\n        adults: searchParams.adults || 1,\n        children: searchParams.children || 0,\n        infants: searchParams.infants || 0,\n        travelClass: searchParams.travelClass || 'ECONOMY',\n        nonStop: searchParams.nonStop || false,\n        currencyCode: searchParams.currencyCode || 'XOF',\n        max: searchParams.max || 50\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error searching flights:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Confirmer le prix d'une offre de vol\n   * @param {Object} flightOffer - Offre de vol\n   * @returns {Promise}\n   */\n  confirmPrice: async (flightOffer) => {\n    try {\n      const response = await api.post('/amadeus/flights/confirm-price', {\n        flightOffer\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error confirming price:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Créer une réservation\n   * @param {Object} bookingData - Données de réservation\n   * @returns {Promise}\n   */\n  createBooking: async (bookingData) => {\n    try {\n      const response = await api.post('/amadeus/bookings', {\n        flightOffer: bookingData.flightOffer,\n        travelers: bookingData.travelers,\n        contact: bookingData.contact,\n        user_id: bookingData.user_id || null\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error creating booking:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Récupérer les détails d'une réservation\n   * @param {number} bookingId - ID de la réservation\n   * @returns {Promise}\n   */\n  getBooking: async (bookingId) => {\n    try {\n      const response = await api.get(`/amadeus/bookings/${bookingId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error getting booking:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Annuler une réservation\n   * @param {number} bookingId - ID de la réservation\n   * @param {string} reason - Raison de l'annulation\n   * @returns {Promise}\n   */\n  cancelBooking: async (bookingId, reason = '') => {\n    try {\n      const response = await api.delete(`/amadeus/bookings/${bookingId}`, {\n        data: { reason }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error cancelling booking:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Rechercher des aéroports\n   * @param {string} keyword - Mot-clé de recherche\n   * @returns {Promise}\n   */\n  searchAirports: async (keyword) => {\n    try {\n      const response = await api.get('/flights/airports/search', {\n        params: { keyword }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error searching airports:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Récupérer mes réservations (authentifié)\n   * @returns {Promise}\n   */\n  getMyBookings: async () => {\n    try {\n      const response = await api.get('/amadeus/my-bookings');\n      return response.data;\n    } catch (error) {\n      console.error('Error getting my bookings:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Formater les données de vol pour l'affichage\n   * @param {Object} offer - Offre de vol Amadeus\n   * @param {Object} dictionaries - Dictionnaires Amadeus\n   * @returns {Object}\n   */\n  formatFlightOffer: (offer, dictionaries = {}) => {\n    const itineraries = offer.itineraries || [];\n    const price = offer.price || {};\n    \n    // Extraire les informations du premier segment (aller)\n    const outbound = itineraries[0] || {};\n    const outboundSegments = outbound.segments || [];\n    const firstSegment = outboundSegments[0] || {};\n    const lastSegment = outboundSegments[outboundSegments.length - 1] || {};\n\n    // Extraire les informations du retour si disponible\n    const inbound = itineraries[1] || null;\n    const inboundSegments = inbound ? (inbound.segments || []) : [];\n\n    // Récupérer les noms des compagnies aériennes\n    const carrierCodes = offer.validatingAirlineCodes || [];\n    const airlines = carrierCodes.map(code => \n      dictionaries.carriers?.[code] || code\n    );\n\n    return {\n      id: offer.id,\n      price: {\n        total: parseFloat(price.total || 0),\n        currency: price.currency || 'XOF',\n        base: parseFloat(price.base || 0)\n      },\n      outbound: {\n        departure: {\n          airport: firstSegment.departure?.iataCode || '',\n          time: firstSegment.departure?.at || '',\n          terminal: firstSegment.departure?.terminal || ''\n        },\n        arrival: {\n          airport: lastSegment.arrival?.iataCode || '',\n          time: lastSegment.arrival?.at || '',\n          terminal: lastSegment.arrival?.terminal || ''\n        },\n        duration: outbound.duration || '',\n        stops: outboundSegments.length - 1,\n        segments: outboundSegments\n      },\n      inbound: inbound ? {\n        departure: {\n          airport: inboundSegments[0]?.departure?.iataCode || '',\n          time: inboundSegments[0]?.departure?.at || '',\n          terminal: inboundSegments[0]?.departure?.terminal || ''\n        },\n        arrival: {\n          airport: inboundSegments[inboundSegments.length - 1]?.arrival?.iataCode || '',\n          time: inboundSegments[inboundSegments.length - 1]?.arrival?.at || '',\n          terminal: inboundSegments[inboundSegments.length - 1]?.arrival?.terminal || ''\n        },\n        duration: inbound.duration || '',\n        stops: inboundSegments.length - 1,\n        segments: inboundSegments\n      } : null,\n      airlines: airlines.join(', '),\n      availableSeats: offer.numberOfBookableSeats || 9,\n      rawOffer: offer // Garder l'offre complète pour la réservation\n    };\n  },\n\n  /**\n   * Formater la durée ISO 8601 en format lisible\n   * @param {string} duration - Durée au format ISO 8601 (ex: PT2H30M)\n   * @returns {string}\n   */\n  formatDuration: (duration) => {\n    if (!duration) return '';\n    \n    const match = duration.match(/PT(\\d+H)?(\\d+M)?/);\n    if (!match) return duration;\n\n    const hours = match[1] ? parseInt(match[1]) : 0;\n    const minutes = match[2] ? parseInt(match[2]) : 0;\n\n    if (hours && minutes) {\n      return `${hours}h ${minutes}min`;\n    } else if (hours) {\n      return `${hours}h`;\n    } else if (minutes) {\n      return `${minutes}min`;\n    }\n    return duration;\n  },\n\n  /**\n   * Formater la date/heure\n   * @param {string} dateTime - Date/heure ISO\n   * @returns {Object}\n   */\n  formatDateTime: (dateTime) => {\n    if (!dateTime) return { date: '', time: '' };\n    \n    const dt = new Date(dateTime);\n    return {\n      date: dt.toLocaleDateString('fr-FR', { \n        day: '2-digit', \n        month: 'short', \n        year: 'numeric' \n      }),\n      time: dt.toLocaleTimeString('fr-FR', { \n        hour: '2-digit', \n        minute: '2-digit' \n      }),\n      full: dt\n    };\n  }\n};\n\nexport default amadeusService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}